"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[178],{99209:function(e){e.exports=JSON.parse('{"functions":[{"name":"tryFromDom","desc":"Attempts to load all available entity-component data from attributes and tags on\\nRoblox `Instance`s into an empty [`Registry`](Registry).\\n\\nComponents defined on the given [`Registry`](Registry) determine what tags names\\nare used to find `Instance`s to convert.\\n\\n:::info\\nEncountering an `Instance` that fails attribute validation is a soft error. Such an\\n`Instance` is skipped and the reason for the failure is logged. Consumers with more\\ngranular requirements should use [`tryFromAttribute`](#tryFromAttribute) instead.","params":[{"name":"registry","desc":"","lua_type":"Registry"}],"returns":[],"function_type":"static","errors":[{"lua_type":"\\"Registry must be empty\\"","desc":"Only an empty Registry can load from the entire Dom."}],"source":{"line":27,"path":"lib/src/Dom/init.lua"}},{"name":"tryFromAttribute","desc":"Attempts to convert the attributes of a given `Instance` into a component of the given\\ntype. Returns a success value followed by the converted component (if successful) or\\nan error message (if unsuccessful).","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"componentDefinition","desc":"","lua_type":"ComponentDefinition"}],"returns":[{"desc":"","lua_type":"boolean, any"}],"function_type":"static","source":{"line":40,"path":"lib/src/Dom/init.lua"}},{"name":"tryFromTag","desc":"Attempts to convert attributes on all the `Instance`s with the `CollectionService` tag\\nmatching the pool\'s component name into entities and components.\\n\\n:::info\\nEncountering an `Instance` that fails attribute validation is a soft error. Such an\\n`Instance` is skipped and the reason for the failure is logged. Consumers with more\\ngranular requirements should use [`tryFromAttribute`](#tryFromAttribute) instead.","params":[{"name":"pool","desc":"","lua_type":"Pool"}],"returns":[],"function_type":"static","source":{"line":55,"path":"lib/src/Dom/init.lua"}},{"name":"tryToAttribute","desc":"Attempts to convert the given component into an attribute dictionary. The keys are the\\nnames of the requested attributes, while the values correspond to the value of the\\ncomponent.\\n\\nReturns a success value followed by the attribute dictionary (if successful) or an\\nerror message (if unsuccessful).\\n\\n:::info\\nThis function has side effects when components contain `Instance` references. When\\nthis is the case, a `Folder` is created under the given `Instance` and an\\n`ObjectValue` under that `Folder` for each `Instance` reference.","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"component","desc":"","lua_type":"any"},{"name":"componentDefinition","desc":"","lua_type":"ComponentDefinition"}],"returns":[{"desc":"","lua_type":"boolean, {[string]: any]}"}],"function_type":"static","source":{"line":77,"path":"lib/src/Dom/init.lua"}},{"name":"waitForRefs","desc":"","params":[],"returns":[],"function_type":"static","yields":true,"source":{"line":84,"path":"lib/src/Dom/init.lua"}}],"properties":[],"types":[],"name":"Dom","desc":"Utility module to convert components to and from attributes and `CollectionService`\\ntags on `Instance`s.","source":{"line":7,"path":"lib/src/Dom/init.lua"}}')}}]);
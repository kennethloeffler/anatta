[{"title":"Mapper","type":0,"sectionRef":"#","url":"api/Mapper","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"Mapper","url":"api/Mapper#functions","content":" "},{"title":"each","type":1,"pageTitle":"Mapper","url":"api/Mapper#each","content":"&lt;/&gt; Mapper:each(callback: ( number, ...any )) → () Iterates over all entities that satisfy the Query. Calls the callback for each entity, passing each entity followed by the components specified by the Query.  "},{"title":"map","type":1,"pageTitle":"Mapper","url":"api/Mapper#map","content":"&lt;/&gt; Mapper:map(callback: ( number, ...any ) → ...any) → () Maps over entities that satisfy the Query. Calls the callback for each entity, passing each entity followed by the components specified by the Query and replacing the components in Query.withAll with the callback's return value. "},{"title":"Anatta","type":0,"sectionRef":"#","url":"api/Anatta","content":"","keywords":""},{"title":"Types","type":1,"pageTitle":"Anatta","url":"api/Anatta#types","content":" "},{"title":"ComponentDefinition","type":1,"pageTitle":"Anatta","url":"api/Anatta#ComponentDefinition","content":"&lt;/&gt; interface ComponentDefinition { name: string type: TypeDefinition description: string? } A named component type with an optional description. "},{"title":"Functions","type":1,"pageTitle":"Anatta","url":"api/Anatta#functions","content":" "},{"title":"createWorld","type":1,"pageTitle":"Anatta","url":"api/Anatta#createWorld","content":"&lt;/&gt; Anatta.createWorld( namespace: string, componentDefinitions: {ComponentDefinition} ) → World Creates a new World and calls Registry:defineComponent on the given ComponentDefinitions.  "},{"title":"getWorld","type":1,"pageTitle":"Anatta","url":"api/Anatta#getWorld","content":"&lt;/&gt; Anatta.getWorld(namespace: string) → World Returns the World with the given namespace. "},{"title":"t","type":0,"sectionRef":"#","url":"api/t","content":"","keywords":""},{"title":"Types","type":1,"pageTitle":"t","url":"api/t#types","content":" "},{"title":"TypeDefinition","type":1,"pageTitle":"t","url":"api/t#TypeDefinition","content":"&lt;/&gt; interface TypeDefinition { check: (...) typeParams: {TypeDefinition} typeName: string } A wrapped t check returned by each member function. "},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/intro","content":"Introduction","keywords":""},{"title":"Reactor","type":0,"sectionRef":"#","url":"api/Reactor","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"Reactor","url":"api/Reactor#functions","content":" "},{"title":"consume","type":1,"pageTitle":"Reactor","url":"api/Reactor#consume","content":"&lt;/&gt; Reactor:consume(entity: number) → () Clears a given entity's set of updated components.  "},{"title":"consumeEach","type":1,"pageTitle":"Reactor","url":"api/Reactor#consumeEach","content":"&lt;/&gt; Reactor:consumeEach(callback: ( number, ...any )) → () Iterates over all the entities present in the Reactor and clears each entity's set of updated componants. Calls the callback for each entity, passing each entity followed by the components specified by the Query.  "},{"title":"each","type":1,"pageTitle":"Reactor","url":"api/Reactor#each","content":"&lt;/&gt; Reactor:each(callback: ( number, ...any )) → () Iterates over the all the entities present in the Reactor. Calls the callback for each entity, passing each entity followed by the components specified by the Query.  "},{"title":"withAttachments","type":1,"pageTitle":"Reactor","url":"api/Reactor#withAttachments","content":"&lt;/&gt; Reactor:withAttachments(callback: ( number, ...any ) → {RBXScriptConnection | Instance}) → () Calls the callback every time an entity enters the Reactor, passing each entity and its components and attaching the return value to each entity. The callback should return a list of connections and/or Instances. When the entity later leaves the Reactor, attached Instances are destroyed and attached connections are disconnected. "},{"title":"A Pattern Born for Live-Service Games","type":0,"sectionRef":"#","url":"docs/why-roblox-ecs/live-service-pattern","content":"A Pattern Born for Live-Service Games Most games on Roblox are developed as live-service games. They are also called games as a service or simply live games. Regardless of the term we use, it just refers to games that use a recurring revenue model. Development doesn't stop after launch; the product is continuously upgraded and sold. This usually means that a decent chunk of development time will be spent creating content for the game: new cosmetic items, gameplay areas, storylines, promotional events. Players in multiplayer games talk to each other, sharing personal knowledge and secrets of the game. This is good for community effects, but can have the unfortunate side effect of players consuming content much faster than they otherwise would. The problem gets worse the larger and more intertwined a game's community becomes. To maintain a very successful game, massive amounts of content must be produced - quickly, efficiently, and regularly. Creating all this content takes a lot of time. Large teams have to be built to just barely keep up. Sometimes a new piece of content requires a piece of game logic to change or work with another in unanticipated ways. Other times a player has discovered a game-breaking strategy that demands a change to an integral part of the game logic. The code must be easy to change and debug: requirements that cut right across engineering concerns are inevitably introduced (&quot;can you make me a gun that shoots swords?&quot;), so it's also important that the programming model doesn't fall apart in fundamental ways when this happens. As experiences grow larger and more complex, there is an ever-increasing amount of data to worry about persisting. This may bring to mind things like players' storyline progress, collectibles, stats, and lifetime achievements, but it also includes things like items, ability types, and even different areas and zones in the game. On a live-service game, all of it might be important someday, so it should be kept in a format that's easy to transport, inspect, and transform. To keep it short, content is data, and properly dealing with it can have outsized impact on ease of development.","keywords":""},{"title":"Dom","type":0,"sectionRef":"#","url":"api/Dom","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"Dom","url":"api/Dom#functions","content":" "},{"title":"tryFromAttribute","type":1,"pageTitle":"Dom","url":"api/Dom#tryFromAttribute","content":"&lt;/&gt; Dom.tryFromAttribute( instance: Instance, componentDefinition: ComponentDefinition ) → boolean,any Attempts to convert the attributes of a given Instance into a component of the given type. Returns a success value followed by the converted component (if successful) or an error message (if unsuccessful).  "},{"title":"tryFromDom","type":1,"pageTitle":"Dom","url":"api/Dom#tryFromDom","content":"&lt;/&gt; Dom.tryFromDom(registry: Registry) → () Attempts to load all available entity-component data from attributes and tags on Roblox Instances into an empty Registry. Components defined on the given Registry determine what tags names are used to find Instances to convert. info Encountering an Instance that fails attribute validation is a soft error. Such an Instance is skipped and the reason for the failure is logged. Consumers with more granular requirements should use tryFromAttribute instead. "},{"title":"Errors","type":1,"pageTitle":"Dom","url":"api/Dom##","content":"Type\tDescription&quot;Registry must be empty&quot;\tOnly an empty Registry can load from the entire Dom.  "},{"title":"tryFromTag","type":1,"pageTitle":"Dom","url":"api/Dom#tryFromTag","content":"&lt;/&gt; Dom.tryFromTag(pool: Pool) → () Attempts to convert attributes on all the Instances with the CollectionService tag matching the pool's component name into entities and components. info Encountering an Instance that fails attribute validation is a soft error. Such an Instance is skipped and the reason for the failure is logged. Consumers with more granular requirements should use tryFromAttribute instead.  "},{"title":"tryToAttribute","type":1,"pageTitle":"Dom","url":"api/Dom#tryToAttribute","content":"&lt;/&gt; Dom.tryToAttribute( instance: Instance, component: any, componentDefinition: ComponentDefinition ) → boolean,{[string]: any]} Attempts to convert the given component into an attribute dictionary. The keys are the names of the requested attributes, while the values correspond to the value of the component. Returns a success value followed by the attribute dictionary (if successful) or an error message (if unsuccessful). info This function has side effects when components contain Instance references. When this is the case, a Folder is created under the given Instance and an ObjectValue under that Folder for each Instance reference.  "},{"title":"waitForRefs","type":1,"pageTitle":"Dom","url":"api/Dom#waitForRefs","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Dom.waitForRefs() → ()  "},{"title":"World","type":0,"sectionRef":"#","url":"api/World","content":"","keywords":""},{"title":"Types","type":1,"pageTitle":"World","url":"api/World#types","content":" "},{"title":"Query","type":1,"pageTitle":"World","url":"api/World#Query","content":"&lt;/&gt; interface Query { withAll: {string}? withUpdated: {string}? withAny: {string}? without: {string}? } A Query represents a component aggregation to retrieve from a Registry. A Query can be finalized by passing it to World:getReactor or World:getMapper. Various Reactor and Mapper methods accept callbacks that are passed an entity and its components. Such callbacks receive the entity as the first argument, followed by the entity's components from withAll, then the components from withUpdated, and finally the components from withAny. Query.withAll An entity must have all of the components specified in withAll to appear in the query. Query.withUpdated An entity must have an updated copy of all the components specified in withUpdated to appear in the query. Query.withAny An entity may have any or none of the components specified in withAny and still appear in the query. Query.without An entity must not have any of the components specified in without to appear in the query. "},{"title":"Properties","type":1,"pageTitle":"World","url":"api/World#properties","content":" "},{"title":"registry","type":1,"pageTitle":"World","url":"api/World#registry","content":"&lt;/&gt; World.registry: Registry Provides direct, unscoped access to a World's Registry. "},{"title":"Functions","type":1,"pageTitle":"World","url":"api/World#functions","content":" "},{"title":"getMapper","type":1,"pageTitle":"World","url":"api/World#getMapper","content":"&lt;/&gt; World:getMapper(query: Query) → Mapper Creates a new Mapper given a Query. "},{"title":"Errors","type":1,"pageTitle":"World","url":"api/World##","content":"Type\tDescription&quot;Mappers cannot track updates to components&quot; &quot;Mappers need at least one component type specified in withAll&quot;\t  "},{"title":"getReactor","type":1,"pageTitle":"World","url":"api/World#getReactor","content":"&lt;/&gt; World:getReactor(query: Query) → Reactor Creates a new Reactor given a Query. "},{"title":"Errors","type":1,"pageTitle":"World","url":"api/World##","content":"Type\tDescription&quot;Reactors need at least one component type specified in withAll, withUpdated, or withAny&quot; &quot;Reactors can only track up to 32 updated component types&quot;\t "},{"title":"Registry","type":0,"sectionRef":"#","url":"api/Registry","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"Registry","url":"api/Registry#functions","content":" "},{"title":"addComponent","type":1,"pageTitle":"Registry","url":"api/Registry#addComponent","content":"&lt;/&gt; Registry:addComponent( entity: number, componentName: string, component: any ) → any Adds a component to the entity and returns the component. info An entity can only have one component of each type at a time. "},{"title":"Errors","type":1,"pageTitle":"Registry","url":"api/Registry##","content":"Type\tDescription&quot;entity must be a number (got %s)&quot;\tThe entity is not a number. &quot;entity %d does not exist or has been destroyed&quot;\tThe entity is invalid. &quot;invalid component name: %s&quot;\tNo component goes by that name. &quot;entity %d already has a %s&quot;\tThe entity already has that component. Failed type check\tThe given component has the wrong type.  "},{"title":"addOrReplaceComponent","type":1,"pageTitle":"Registry","url":"api/Registry#addOrReplaceComponent","content":"&lt;/&gt; Registry:addOrReplaceComponent( entity: number, componentName: string, component: any ) → any If the entity has the component, replaces it with the given component and returns the new component. Otherwise, adds the component to the entity and returns the new component. "},{"title":"Errors","type":1,"pageTitle":"Registry","url":"api/Registry##","content":"Type\tDescription&quot;entity must be a number (got %s)&quot;\tThe entity is not a number. &quot;entity %d does not exist or has been destroyed&quot;\tThe entity is invalid. &quot;invalid component name: %s&quot;\tNo component goes by that name. Failed type check\tThe given component has the wrong type.  "},{"title":"countComponents","type":1,"pageTitle":"Registry","url":"api/Registry#countComponents","content":"&lt;/&gt; Registry:countComponents(componentName: string) → number Returns the total number of entities with the given component. "},{"title":"Errors","type":1,"pageTitle":"Registry","url":"api/Registry##","content":"Type\tDescription&quot;invalid component name: %s&quot;\tNo component goes by that name.  "},{"title":"countEntities","type":1,"pageTitle":"Registry","url":"api/Registry#countEntities","content":"&lt;/&gt; Registry:countEntities() → number Returns the total number of entities currently in use by the registry.  "},{"title":"createEntity","type":1,"pageTitle":"Registry","url":"api/Registry#createEntity","content":"&lt;/&gt; Registry:createEntity() → number Creates and returns a unique identifier that represents a game object. Usage: local entity = registry:createEntity() assert(entity == 1) entity = registry:createEntity() assert(entity == 2) entity = registry:createEntity() assert(entity == 3)   "},{"title":"defineComponent","type":1,"pageTitle":"Registry","url":"api/Registry#defineComponent","content":"&lt;/&gt; Registry:defineComponent(componentDefinition: ComponentDefinition) → () Registers a new component type for the registry. Usage: registry:defineComponent({ name = &quot;Health&quot;, type = t.number }) local entity = registry:createEntity() registry:addComponent(entity, &quot;Health&quot;, 100)  "},{"title":"Errors","type":1,"pageTitle":"Registry","url":"api/Registry##","content":"Type\tDescription&quot;there is already a component type named %s&quot;\tThe name is already being used.  "},{"title":"destroyEntity","type":1,"pageTitle":"Registry","url":"api/Registry#destroyEntity","content":"&lt;/&gt; Registry:destroyEntity(entity: number) → () Removes all of an entity's components and frees its ID. Usage: local entity = registry:create() registry:destroyEntity(entity) -- the entity is no longer valid and functions like getComponent or addComponent will throw assert(registry:isEntityValid(entity) == false)  "},{"title":"Errors","type":1,"pageTitle":"Registry","url":"api/Registry##","content":"Type\tDescription&quot;entity must be a number (got %s)&quot;\tThe entity is not a number. &quot;entity %d does not exist or has been destroyed&quot;\tThe entity is invalid.  "},{"title":"each","type":1,"pageTitle":"Registry","url":"api/Registry#each","content":"&lt;/&gt; Registry:each(callback: (entity: number)) → () Passes each entity currently in use by the registry to the given callback.  "},{"title":"entityHas","type":1,"pageTitle":"Registry","url":"api/Registry#entityHas","content":"&lt;/&gt; Registry:entityHas( entity: number, ...componentNames: string ) → boolean Returns true if the entity all of the given components. Otherwise, returns false. "},{"title":"Errors","type":1,"pageTitle":"Registry","url":"api/Registry##","content":"Type\tDescription&quot;entity must be a number (got %s)&quot;\tThe entity is not a number. &quot;entity %d does not exist or has been destroyed&quot;\tThe entity is invalid. &quot;invalid component name: %s&quot;\tNo component goes by that name.  "},{"title":"entityHasAny","type":1,"pageTitle":"Registry","url":"api/Registry#entityHasAny","content":"&lt;/&gt; Registry:entityHasAny( entity: number, ...componentNames: string ) → boolean Returns true if the entity has any of the given components. Otherwise, returns false. "},{"title":"Errors","type":1,"pageTitle":"Registry","url":"api/Registry##","content":"Type\tDescription&quot;entity must be a number (got %s)&quot;\tThe entity is not a number. &quot;entity %d does not exist or has been destroyed&quot;\tThe entity is invalid. &quot;invalid component name: %s&quot;\tNo component goes by that name.  "},{"title":"getComponent","type":1,"pageTitle":"Registry","url":"api/Registry#getComponent","content":"&lt;/&gt; Registry:getComponent( entity: number, componentName: string ) → any Returns the component of the given type on the entity. "},{"title":"Errors","type":1,"pageTitle":"Registry","url":"api/Registry##","content":"Type\tDescription&quot;entity must be a number (got %s)&quot;\tThe entity is not a number. &quot;entity %d does not exist or has been destroyed&quot;\tThe entity is invalid. &quot;invalid component name: %s&quot;\tNo component goes by that name.  "},{"title":"getComponentDefinition","type":1,"pageTitle":"Registry","url":"api/Registry#getComponentDefinition","content":"&lt;/&gt; Registry:getComponentDefinition(componentName: string) → () Returns the ComponentDefinition with the given name. "},{"title":"Errors","type":1,"pageTitle":"Registry","url":"api/Registry##","content":"Type\tDescription&quot;invalid component name: %s&quot;\tNo component goes by that name.  "},{"title":"getComponents","type":1,"pageTitle":"Registry","url":"api/Registry#getComponents","content":"&lt;/&gt; Registry:getComponents( entity: number, output: table, ...componentNames: string ) → ...any Returns all of the given components on the entity. "},{"title":"Errors","type":1,"pageTitle":"Registry","url":"api/Registry##","content":"Type\tDescription&quot;entity must be a number (got %s)&quot;\tThe entity is not a number. &quot;entity %d does not exist or has been destroyed&quot;\tThe entity is invalid. &quot;invalid component name: %s&quot;\tNo component goes by that name.  "},{"title":"getOrAddComponent","type":1,"pageTitle":"Registry","url":"api/Registry#getOrAddComponent","content":"&lt;/&gt; Registry:getOrAddComponent( entity: number, componentName: string, component: any ) → () If the entity has the component, returns the component. Otherwise adds the component to the entity and returns the component. "},{"title":"Errors","type":1,"pageTitle":"Registry","url":"api/Registry##","content":"Type\tDescription&quot;entity must be a number (got %s)&quot;\tThe entity is not a number. &quot;entity %d does not exist or has been destroyed&quot;\tThe entity is invalid. &quot;invalid component name: %s&quot;\tNo component goes by that name. Failed type check\tThe given component has the wrong type.  "},{"title":"getPool","type":1,"pageTitle":"Registry","url":"api/Registry#getPool","content":"&lt;/&gt; Registry:getPool(componentName: string) → Pool Returns the pool containing the specified components. "},{"title":"Errors","type":1,"pageTitle":"Registry","url":"api/Registry##","content":"Type\tDescription&quot;invalid component name: %s&quot;\tNo component goes by that name.  "},{"title":"getPools","type":1,"pageTitle":"Registry","url":"api/Registry#getPools","content":"&lt;/&gt; Registry:getPools(componentNames: {string}) → {Pool} Returns a list of pools containing the specified components in the same order as the given list of component names. "},{"title":"Errors","type":1,"pageTitle":"Registry","url":"api/Registry##","content":"Type\tDescription&quot;invalid component name: %s&quot;\tNo component goes by that name.  "},{"title":"isComponentDefined","type":1,"pageTitle":"Registry","url":"api/Registry#isComponentDefined","content":"&lt;/&gt; Registry:isComponentDefined(componentName: string) → boolean Returns true if the registry has a component type with the given name. Otherwise, returns false.  "},{"title":"isEntityOrphaned","type":1,"pageTitle":"Registry","url":"api/Registry#isEntityOrphaned","content":"&lt;/&gt; Registry:isEntityOrphaned(entity: number) → boolean Returns true if the entity has no components. Otherwise, returns false. Usage local entity = registry:createEntity() assert(self:isEntityOrphaned(entity) == true) registry:addComponent(entity, &quot;Car&quot;, { model = game.ReplicatedStorage.Car:Clone(), color = &quot;Red&quot;, }) assert(registry:isEntityOrphaned(entity) == false)  "},{"title":"Errors","type":1,"pageTitle":"Registry","url":"api/Registry##","content":"Type\tDescription&quot;entity must be a number (got %s)&quot;\tThe entity is not a number. &quot;entity %d does not exist or has been destroyed&quot;\tThe entity is invalid.  "},{"title":"isEntityValid","type":1,"pageTitle":"Registry","url":"api/Registry#isEntityValid","content":"&lt;/&gt; Registry:isEntityValid(entity: number) → boolean Returns true if the entity exists. Otherwise, returns false. Usage: assert(registry:isEntityValid(0) == false) local entity = registry:createEntity() assert(registry:isEntityValid(entity) == true) registry:destroyEntity(entity) assert(registry:isEntityValid(entity) == false)  "},{"title":"Errors","type":1,"pageTitle":"Registry","url":"api/Registry##","content":"Type\tDescription&quot;entity must be a number (got %s)&quot;\tThe entity is not a number.  "},{"title":"removeComponent","type":1,"pageTitle":"Registry","url":"api/Registry#removeComponent","content":"&lt;/&gt; Registry:removeComponent( entity: number, componentName: string ) → () Removes the component from the entity. "},{"title":"Errors","type":1,"pageTitle":"Registry","url":"api/Registry##","content":"Type\tDescription&quot;entity must be a number (got %s)&quot;\tThe entity is not a number. &quot;entity %d does not exist or has been destroyed&quot;\tThe entity is invalid. &quot;invalid component name: %s&quot;\tNo component goes by that name. &quot;entity %d does not have a %s&quot;\tThe entity is expected to have this component.  "},{"title":"replaceComponent","type":1,"pageTitle":"Registry","url":"api/Registry#replaceComponent","content":"&lt;/&gt; Registry:replaceComponent( entity: number, componentName: string, component: any ) → any Replaces the given component on the entity and returns the new component. "},{"title":"Errors","type":1,"pageTitle":"Registry","url":"api/Registry##","content":"Type\tDescription&quot;entity must be a number (got %s)&quot;\tThe entity is not a number. &quot;entity %d does not exist or has been destroyed&quot;\tThe entity is invalid. &quot;invalid component name: %s&quot;\tNo component goes by that name. Failed type check\tThe given component has the wrong type. &quot;entity %d does not have a %s&quot;\tThe entity is expected to have this component.  "},{"title":"tryAddComponent","type":1,"pageTitle":"Registry","url":"api/Registry#tryAddComponent","content":"&lt;/&gt; Registry:tryAddComponent( entity: number, componentName: string, component: any ) → any If the entity does not have the component, adds and returns the component. Otherwise, returns nil. "},{"title":"Errors","type":1,"pageTitle":"Registry","url":"api/Registry##","content":"Type\tDescription&quot;entity must be a number (got %s)&quot;\tThe entity is not a number. &quot;entity %d does not exist or has been destroyed&quot;\tThe entity is invalid. &quot;invalid component name: %s&quot;\tNo component goes by that name. Failed type check\tThe given component has the wrong type.  "},{"title":"tryRemoveComponent","type":1,"pageTitle":"Registry","url":"api/Registry#tryRemoveComponent","content":"&lt;/&gt; Registry:tryRemoveComponent( entity: number, componentName: string ) → boolean If the entity has the component, removes it and returns true. Otherwise, returns false. "},{"title":"Errors","type":1,"pageTitle":"Registry","url":"api/Registry##","content":"Type\tDescription&quot;entity must be a number (got %s)&quot;\tThe entity is not a number. &quot;entity %d does not exist or has been destroyed&quot;\tThe entity is invalid. &quot;invalid component name: %s&quot;\tNo component goes by that name.  "},{"title":"visitComponents","type":1,"pageTitle":"Registry","url":"api/Registry#visitComponents","content":"&lt;/&gt; Registry:visitComponents( callback: (componentName: string) → boolean, entity: number? ) → boolean Passes all the component names defined on the registry to the given callback. The iteration continues until the callback returns nil. If an entity is given, passes only the components that the entity has. "},{"title":"Errors","type":1,"pageTitle":"Registry","url":"api/Registry##","content":"Type\tDescription&quot;entity must be a number (got %s)&quot;\tThe entity is not a number. &quot;entity %d does not exist or has been destroyed&quot;\tThe entity is invalid.  "},{"title":"withComponents","type":1,"pageTitle":"Registry","url":"api/Registry#withComponents","content":"&lt;/&gt; Registry:withComponents( entity: number, components: {[string]: any} ) → number Adds the given components to the entity and returns the entity. "},{"title":"Errors","type":1,"pageTitle":"Registry","url":"api/Registry##","content":"Type\tDescription&quot;entity must be a number (got %s)&quot;\tThe entity is not a number. &quot;entity %d does not exist or has been destroyed&quot;\tThe entity is invalid. &quot;invalid component name: %s&quot;\tNo component goes by that name. &quot;entity %d already has a %s&quot;\tThe entity already has that component. Failed type check\tThe given component has the wrong type. "}]